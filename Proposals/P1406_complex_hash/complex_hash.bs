<pre class='metadata'>
Title: Add more std::hash specializations
Shortname: P1406
Status: NP
Group: WG21
Level: 2
Editor: Alexander Zaitsev, Solarwinds, zamazan4ik@tut.by, zamazan4ik@tut.by
        Antony Polukhin, Yandex Taxi, antoshkka@gmail.com, antoshkka@yandex-team.ru
!Audience: LEWGI, LEWG, LWG
!Source: https://github.com/ZaMaZaN4iK/ConfsANDProps/blob/master/Proposals/complex_hash.bs
Abstract: In Standard library we already have std::hash specializations for some classes like std::string. Unfortunately, we have no specializations for a lot of other classes from Standard Library like std::array, std::tuple, etc. At the moment people who need hash calucations for such containers must use Boost.Hash functions or write std::hash specialization manually. This proposal adds std::hash specializations for different containers from Standard Library. Addresses an issue LWG #1025.

Date: 2018-12-04
Markup Shorthands: markdown yes
</pre>

Changes since R1
========================

  * Removed a requirement for the same hash value for different containers with the same content.
  * Left std::hash specializations only for std::tuple, std::pair, std::array, std::basic_string. Other specializations are moved to another paper because of lack of motivation.

Design decisions {#design}
========================

  * We do not enable `hash` for unordered_set, unordered_map, unordered_multiset, unordered_multimap because of the hashing collisions and buckets count. Position of the elment depends on those two factors, which leads to different hashes for containers with the same content.
  * We do not enable hash for `stack` and `queue` adapters for now. Probably will be enabled in future papers.

Proposed wording {#wording}
========================

Add a new Section "19.4.6, Hash support [pair.hash]", with following content:

```
template<typename A, typename B> 
  struct hash<pair<A, B>>;
```  
 
<span style="color:green">Enabled if specializations `hash<remove_const_t<A>>` and `hash<remove_const_t<B>>` are both enabled, and disabled otherwise.</span>

<span style="color:green">Let `PAIR` denote a `pair` type, `x` denote a value of type `PAIR`. For enabled specialization `hash<PAIR>` the following holds:
`hash<PAIR>{}(x)` == `hash<decltype(tuple{x})>{}(x)`.
</span>


Add a new Section "19.5.3.11, Hash support [tuple.hash]", with following content:

```
template<typename... T> 
  struct hash<tuple<T...>>;
```  
 
<span style="color:green">Enabled if specialization `hash<remove_const_t<U>>` is enabled for every template argument `U` in the parameter pack, and disabled otherwise.</span>


Add a new Section "21.3.7.7, Hash support [array.hash]", with following content:

```
template<typename T, std::size_t N> 
  struct hash<array<T, N>>;
```  
 
<span style="color:green">Enabled if specialization `hash<remove_const_t<T>>` is enabled, and disabled otherwise.</span>

Remove a paragraph from Section "20.3.5, Hash support [basic.string.hash]", with following content:

<span style="color:red">
```
template<> struct hash<string>;
template<> struct hash<u8string>;
template<> struct hash<u16string>;
template<> struct hash<u32string>;
template<> struct hash<wstring>;
template<> struct hash<pmr::string>;
template<> struct hash<pmr::u8string>;
template<> struct hash<pmr::u16string>;
template<> struct hash<pmr::u32string>;
template<> struct hash<pmr::wstring>;
```
</span>

Add a new paragraph to Section "20.3.5, Hash support [basic.string.hash]", with following content:

```
template<typename charT, typename Allocator> 
  struct hash<basic_string<charT, char_traits<charT>, Allocator>>;
```

<span style="color:green">Enabled if specialization `hash<remove_const_t<charT>>` is enabled, and disabled otherwise.</span>


Possible implementation {#impl}
========================

Some possible implementations can be found in [Boost.Hash](http://www.boost.org/doc/libs/1_68_0/doc/html/hash/reference.html#header.boost.functional.hash_hpp "Boost.Hash") library.

References {#references}
========================

[Boost.Hash](http://www.boost.org/doc/libs/1_68_0/doc/html/hash/reference.html#header.boost.functional.hash_hpp "Boost.Hash")
