<pre class='metadata'>
Title: Add more advanced std::hash specializations
Shortname: P1406
Status: NP
Group: WG21
Level: 1
Editor: Alexander Zaitsev, Solarwinds, zamazan4ik@tut.by, zamazan4ik@tut.by
        Antony Polukhin, Yandex Taxi, antoshkka@gmail.com, antoshkka@yandex-team.ru
!Audience: LEWGI, LEWG, LWG
!Source: https://github.com/ZaMaZaN4iK/ConfsANDProps/blob/master/Proposals/complex_hash.bs
Abstract: In Standard library we already have std::hash specializations for some classes like std::string. Unfortunately, we have no specializations for a lot of other classes from Standard Library like std::vector, std::list, etc. At the moment people who need hash calucations for such containers must use Boost.Hash functions or write std::hash specialization manually. This proposal adds std::hash specializations for different containers from Standard Library. Addresses an issue LWG #1025.

Date: 2018-12-04
Markup Shorthands: markdown yes
</pre>

Design decisions {#design}
========================

  * We do not enable `hash` for unordered_set, unordered_map, unordered_multiset, unordered_multimap because of the hashing collisions and buckets count. Position of the elment depends on those two factors, which leads to different hashes for containers with the same content.
  * We do not enable hash for `stack` and `queue` adapters for now.

Proposed wording {#wording}
========================

Add a new Section "21.3.8.6, Hash support [deque.hash]", with following content:

```
template<typename T, typename Allocator> 
  struct hash<deque<T, Allocator>>;
```  
  
<span style="color:green">Enabled if specialization `hash<remove_const_t<T>>` is enabled, and disabled otherwise.</span>


Add a new Section "21.3.9.8, Hash support [forward_list.hash]", with following content:

```
template<typename T, typename Allocator> 
  struct hash<forward_list<T, Allocator>>;
```

<span style="color:green">Enabled if specialization `hash<remove_const_t<T>>` is enabled, and disabled otherwise.</span>


Add a new Section "21.3.10.7, Hash support [list.hash]", with following content:

```
template<typename T, typename Allocator> 
  struct hash<list<T, Allocator>>;
```

<span style="color:green">Enabled if specialization `hash<remove_const_t<T>>` is enabled, and disabled otherwise.</span>


Add a new Section "21.3.11.7, Hash support [vector.hash]", with following content:

```
template<typename T, typename Allocator> 
  struct hash<vector<T, Allocator>>;
```

<span style="color:green">Enabled if specialization `hash<remove_const_t<T>>` is enabled, and disabled otherwise.</span>


Add a new Section "21.4.4.6, Hash support [map.hash]", with following content:

```
template<typename Key, typename T, typename Compare, typename Allocator> 
  struct hash<map<Key, T, Compare, Allocator>>;
```

<span style="color:green">Enabled if specialization if specializations `hash<remove_const_t<Key>>` and `hash<remove_const_t<T>>` are both enabled, and disabled otherwise.</span>


Add a new Section "21.4.5.5, Hash support [multimap.hash]", with following content:

```
template<typename Key, typename T, typename Compare, typename Allocator> 
  struct hash<multimap<Key, T, Compare, Allocator>>;
```

<span style="color:green">Enabled if specialization if specializations `hash<remove_const_t<Key>>` and `hash<remove_const_t<T>>` are both enabled, and disabled otherwise.</span>


Add a new Section "21.4.6.4, Hash support [set.hash]", with following content:

```
template<typename Key, typename Compare, typename Allocator> 
  struct hash<set<Key, Compare, Allocator>>;
```

<span style="color:green">Enabled if specialization if specializations `hash<remove_const_t<Key>>` is enabled, and disabled otherwise.</span>


Add a new Section "21.4.7.4, Hash support [multiset.hash]", with following content:

```
template<typename Key, typename Compare, typename Allocator> 
  struct hash<multiset<Key, Compare, Allocator>>;
```

<span style="color:green">Enabled if specialization if specializations `hash<remove_const_t<Key>>` is enabled, and disabled otherwise.</span>


Add a new Section "25.7.2.9, Hash support [valarray.hash]", with following content:

```
template<typename T> 
  struct hash<valarray<T>>;
```

<span style="color:green">Enabled if specialization `hash<remove_const_t<T>>` is enabled, and disabled otherwise.</span>

Motivation {#motivation}
========================

All of these `std::hash` specializations (except specializations for `std::forward_list` and `std::valarray` what should be fixed) were introduced in Boost.Hash during the years. There is no reason don't enable these specializations in C++ Standard.

The main reason to enable additional `std::hash` specializations is allowing to end-user use complex keys in unordered containers.

Another reason is simplifying to end-user writing own `std::hash` specializations for complex types which can consist of different STL containers.

From my observations we haven't any limitations which can influence on an implementation in Standard Library.

Examples {#examples}
========================

Possible implementation {#impl}
========================

Some possible implementations can be found in [Boost.Hash](http://www.boost.org/doc/libs/1_68_0/doc/html/hash/reference.html#header.boost.functional.hash_hpp "Boost.Hash") library.

References {#references}
========================

[Boost.Hash](http://www.boost.org/doc/libs/1_68_0/doc/html/hash/reference.html#header.boost.functional.hash_hpp "Boost.Hash")
