<pre class='metadata'>
Title: Add more std::hash specializations
Shortname: Bar
Status: NP
Group: WG21
Level: 1
Editor: Alexander Zaitsev, Solarwinds, zamazan4ik@tut.by.com
Abstract: Complex hash
Date: 2018-12-04
Markup Shorthands: markdown yes
</pre>

Introduction {#introduction}
========================

In Standard library we already have std::hash specializations for some classes like std::string. Unfortunately, we have no specializations for a lot of other classes from STL like std::vector, std::array, etc. - but we have possbility to calculate hash from these containers. People who needs hash calucations for such containers must use Boost.Hash functions or write std::hash specialization manually.

This proposal suggests adding an std::hash specializations for: std::pair, std::complex, std::array, std::tuple, std::vector, std::list, std::forward_list, std::deque, std::set, std::multiset, std::map, std::multimap.

Proposed wording {#wording}
========================

Add a new Section "19.4.6, Hash support [pair.hash]", with following content:

```
template<typename A, typename B> 
  struct hash<pair<A, B>>;
```  
 
Enabled if specializations `hash<std::remove_const_t<A>>` and `hash<std::remove_const_t<B>>` are enabled both, and is disabled otherwise.


Add a new Section "19.5.3.11, Hash support [tuple.hash]", with following content:

```
template<typename... T> 
  struct hash<tuple<T...>>;
```  
 
Enabled if specialization `hash<std::remove_const_t<U>>` is enabled for every template argument `U` in the parameter pack, and disabled otherwise.


Add a new Section "21.3.7.7, Hash support [array.hash]", with following content:

```
template<typename T, std::size_t N> 
  struct hash<array<T, N>>;
```  
 
Enabled if specialization `hash<std::remove_const_t<T>>` is enabled, and disabled otherwise.


Add a new Section "21.3.8.6, Hash support [deque.hash]", with following content:

```
template<typename T, typename Allocator> 
  struct hash<deque<T, Allocator>>;
  
template<typename T> 
  struct hash<pmr::deque<T>>;
```  
  
Enabled if specialization `hash<std::remove_const_t<T>>` is enabled, and disabled otherwise.


Add a new Section "21.3.9.8, Hash support [forward_list.hash]", with following content:

```
template<typename T, typename Allocator> 
  struct hash<forward_list<T, Allocator>>;
  
template<typename T>
  struct hash<pmr::forward_list<T>>;
```

Enabled if specialization `hash<std::remove_const_t<T>>` is enabled, and disabled otherwise.


Add a new Section "21.3.10.7, Hash support [list.hash]", with following content:

```
template<typename T, typename Allocator> 
  struct hash<list<T, Allocator>>;
  
template<typename T> 
  struct hash<pmr::list<T>>;  
```

Enabled if specialization `hash<std::remove_const_t<T>>` is enabled, and disabled otherwise.


Add a new Section "21.3.11.7, Hash support [vector.hash]", with following content:

```
template<typename T, typename Allocator> 
  struct hash<vector<T, Allocator>>;
  
template<typename T> 
  struct hash<pmr::vector<T>>;
```

Enabled if specialization `hash<std::remove_const_t<T>>` is enabled, and disabled otherwise.


Add a new Section "21.6.4.6, Hash support [queue.hash]", with following content:

```
template<typename T, typename Container> 
  struct hash<queue<T, Container>>;
```

Enabled if specialization `hash<std::remove_const_t<Container>>` is enabled, and disabled otherwise.


Add a new Section "21.6.6.6, Hash support [stack.hash]", with following content:

```
template<typename T, typename Container> 
  struct hash<stack<T, Container>>;
```

Enabled if specialization `hash<std::remove_const_t<Container>>` is enabled, and disabled otherwise.


Add a new Section "25.4.11, Hash support [complex.hash]", with following content:

```
template<typename T> 
  struct hash<complex<T>>;
```

Enabled if specialization `hash<std::remove_const_t<T>>` is enabled, and disabled otherwise. TODO


Add a new Section "25.7.2.9, Hash support [valarray.hash]", with following content:

```
template<typename T> 
  struct hash<valarray<T>>;
```

Enabled if specialization `hash<std::remove_const_t<T>>` is enabled, and disabled otherwise.

Possible implementation {#impl}
========================

Possible implementation can be found in [Boost.Hash](http://www.boost.org/doc/libs/1_68_0/doc/html/hash/reference.html#header.boost.functional.hash_hpp "Boost.Hash") library.

References {#references}
========================

[Boost.Hash](http://www.boost.org/doc/libs/1_68_0/doc/html/hash/reference.html#header.boost.functional.hash_hpp "Boost.Hash")
