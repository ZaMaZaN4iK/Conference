<pre class='metadata'>
Title: Add more std::hash specializations
Shortname: P0000
Status: NP
Group: WG21
Level: 1
Editor: Alexander Zaitsev, Solarwinds, zamazan4ik@tut.by, zamazan4ik@tut.by
        Anthony Polukhin, Yandex Taxi, antoshkka@gmail.com, antoshkka@yandex-team.ru
!Audience: LEWGI, LEWG, LWG
!Source: https://github.com/ZaMaZaN4iK/ConfsANDProps/blob/master/Proposals/complex_hash.bs
Abstract: In Standard library we already have std::hash specializations for some classes like std::string. Unfortunately, we have no specializations for a lot of other classes from Standard Library like std::vector, std::array, etc. - but we have possbility to calculate hash from these containers. People who need hash calucations for such containers must use Boost.Hash functions or write std::hash specialization manually. This proposal adds std::hash specializations for different containers from Standard Library.

Date: 2018-12-04
Markup Shorthands: markdown yes
</pre>

Proposed wording {#wording}
========================

Add a new Section "19.4.6, Hash support [pair.hash]", with following content:

```
template<typename A, typename B> 
  struct hash<pair<A, B>>;
```  
 
<span style="color:green">Enabled if specializations `hash<remove_const_t<A>>` and `hash<remove_const_t<B>>` are both enabled, and disabled otherwise.</span>


Add a new Section "19.5.3.11, Hash support [tuple.hash]", with following content:

```
template<typename... T> 
  struct hash<tuple<T...>>;
```  
 
<span style="color:green">Enabled if specialization `hash<remove_const_t<U>>` is enabled for every template argument `U` in the parameter pack, and disabled otherwise.</span>


Add a new Section "21.3.7.7, Hash support [array.hash]", with following content:

```
template<typename T, std::size_t N> 
  struct hash<array<T, N>>;
```  
 
<span style="color:green">Enabled if specialization `hash<remove_const_t<T>>` is enabled, and disabled otherwise.</span>


Add a new Section "21.3.8.6, Hash support [deque.hash]", with following content:

```
template<typename T, typename Allocator> 
  struct hash<deque<T, Allocator>>;
```  
  
<span style="color:green">Enabled if specialization `hash<remove_const_t<T>>` is enabled, and disabled otherwise.</span>


Add a new Section "21.3.9.8, Hash support [forward_list.hash]", with following content:

```
template<typename T, typename Allocator> 
  struct hash<forward_list<T, Allocator>>;
```

<span style="color:green">Enabled if specialization `hash<remove_const_t<T>>` is enabled, and disabled otherwise.</span>


Add a new Section "21.3.10.7, Hash support [list.hash]", with following content:

```
template<typename T, typename Allocator> 
  struct hash<list<T, Allocator>>;
```

<span style="color:green">Enabled if specialization `hash<remove_const_t<T>>` is enabled, and disabled otherwise.</span>


Add a new Section "21.3.11.7, Hash support [vector.hash]", with following content:

```
template<typename T, typename Allocator> 
  struct hash<vector<T, Allocator>>;
```

<span style="color:green">Enabled if specialization `hash<remove_const_t<T>>` is enabled, and disabled otherwise.</span>


Add a new Section "21.4.4.6, Hash support [map.hash]", with following content:

```
template<typename Key, typename T, typename Compare, typename Allocator> 
  struct hash<map<Key, T, Compare, Allocator>>;
```

<span style="color:green">Enabled if specialization if specializations `hash<remove_const_t<Key>>` and `hash<remove_const_t<T>>` are both enabled, and disabled otherwise.</span>


Add a new Section "21.4.5.5, Hash support [multimap.hash]", with following content:

```
template<typename Key, typename T, typename Compare, typename Allocator> 
  struct hash<multimap<Key, T, Compare, Allocator>>;
```

<span style="color:green">Enabled if specialization if specializations `hash<remove_const_t<Key>>` and `hash<remove_const_t<T>>` are both enabled, and disabled otherwise.</span>


Add a new Section "21.4.6.4, Hash support [set.hash]", with following content:

```
template<typename Key, typename Compare, typename Allocator> 
  struct hash<set<Key, Compare, Allocator>>;
```

<span style="color:green">Enabled if specialization if specializations `hash<remove_const_t<Key>>` is enabled, and disabled otherwise.</span>


Add a new Section "21.4.7.4, Hash support [multiset.hash]", with following content:

```
template<typename Key, typename Compare, typename Allocator> 
  struct hash<multiset<Key, Compare, Allocator>>;
```

<span style="color:green">Enabled if specialization if specializations `hash<remove_const_t<Key>>` is enabled, and disabled otherwise.</span>


Add a new Section "21.6.4.6, Hash support [queue.hash]", with following content:

```
template<typename T, typename Container> 
  struct hash<queue<T, Container>>;
```

<span style="color:green">Enabled if specialization `hash<remove_const_t<Container>>` is enabled, and disabled otherwise.</span>


Add a new Section "21.6.6.6, Hash support [stack.hash]", with following content:

```
template<typename T, typename Container> 
  struct hash<stack<T, Container>>;
```

<span style="color:green">Enabled if specialization `hash<remove_const_t<Container>>` is enabled, and disabled otherwise.</span>


Add a new Section "25.7.2.9, Hash support [valarray.hash]", with following content:

```
template<typename T> 
  struct hash<valarray<T>>;
```

<span style="color:green">Enabled if specialization `hash<remove_const_t<T>>` is enabled, and disabled otherwise.</span>


Add a new paragraph to Section "20.3.5, Hash support [basic.string.hash]", with following content:

```
template<typename charT, typename Allocator> 
  struct hash<basic_string<charT, char_traits<charT>, Allocator>>;
```

<span style="color:green">Enabled if specialization `hash<remove_const_t<T>>` is enabled, and disabled otherwise.</span>


Add a new paragraph to "21.2.1, General container requirements [container.requirements.general]", with following content:

<span style="color:green">Let `X` denote a container type, `x` denote a value of type `X`, `TUPLE` denote a `tuple` value of all the values of `x` from `begin()` to `end()` where `get<i>(TUPLE)` equals `*advance(x.begin(), i)` for any i in range `[0; x.size())`.  For enabled specialization `hash<X>` the following holds:
`hash<X>{}(x)` == `hash<decltype(TUPLE)>{}(TUPLE)`.</span>

Possible implementation {#impl}
========================

Some possible implementations can be found in [Boost.Hash](http://www.boost.org/doc/libs/1_68_0/doc/html/hash/reference.html#header.boost.functional.hash_hpp "Boost.Hash") library.

References {#references}
========================

[Boost.Hash](http://www.boost.org/doc/libs/1_68_0/doc/html/hash/reference.html#header.boost.functional.hash_hpp "Boost.Hash")
